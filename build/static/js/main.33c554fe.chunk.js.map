{"version":3,"sources":["App.module.css","libx/Button/Button.module.css","components/Laps.module.css","components/AppBar.module.css","libx/View/View.module.css","libx/View/View.jsx","libx/Button/Button.jsx","libx/Text/Text.jsx","components/Buttons.jsx","components/Laps.jsx","components/AppBar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","View","fullScreen","className","others","isFullScreen","styles","ViewFullScreen","classNames","Button","label","type","size","t","style","small","fontSize","normal","large","Text","paragraph","color","selectable","userSelect","Buttons","isTimerOn","timerCurrentTime","handle","handlers","timerString","onClick","start","stop","data-timerstring","lap","reset","Laps","props","laps","map","index","lapItem","key","AppBar","Title","App","state","timerStart","bind","this","setState","Date","now","timer","setInterval","clearInterval","event","newLaps","unshift","target","dataset","timerstring","time","mod","Math","floor","slice","nanoSecond","format","second","minute","hour","colorize","TimerContainer","TimerDisplay","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.33c554fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimerContainer\":\"App_TimerContainer__1FjIH\",\"TimerDisplay\":\"App_TimerDisplay__A2NEg\",\"Buttons\":\"App_Buttons__39z8r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3DK3b\",\"ButtonLarge\":\"Button_ButtonLarge__LGJPp\",\"PrimaryButton\":\"Button_PrimaryButton__2ujzl\",\"SecondaryButton\":\"Button_SecondaryButton__1t54_\",\"DangerButton\":\"Button_DangerButton__ywP5y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"laps\":\"Laps_laps__1Jl8w\",\"lapItem\":\"Laps_lapItem__1a5EH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppBar\":\"AppBar_AppBar__1Ej1u\",\"Title\":\"AppBar_Title__2zjz3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ViewFullScreen\":\"View_ViewFullScreen__3ipqm\"};","import React from \"react\";\nimport styles from \"./View.module.css\";\n\nexport function View({ fullScreen = false, className = null, ...others }) {\n  const isFullScreen = fullScreen && styles.ViewFullScreen\n  const classNames = className ? `${isFullScreen} ${className}` : isFullScreen;\n\n  return <div className={classNames} {...others} />;\n}\n","import React from \"react\";\nimport styles from \"./Button.module.css\";\n\nexport function Button({\n  label = \"Button\",\n  type = \"Primary\",\n  size = \"normal\",\n  ...others\n}) {\n  const sizes = {\n    small: {\n      fontSize: 16,\n    },\n    normal: {\n      fontSize: 18,\n    },\n    large: {\n      fontSize: 22,\n    },\n  };\n\n  const t = `${type}Button`;\n\n  return (\n    <span\n      style={sizes[size]}\n      className={`${styles.Button} ${styles[t]}`}\n      {...others}\n    >\n      {label}\n    </span>\n  );\n}\n","import React from \"react\";\n\nexport function Text({ paragraph = false, color, selectable = true, ...others }) {\n  const style = {\n    color,\n    userSelect: selectable ? \"auto\" : \"none\",\n  };\n\n  return paragraph ? <p style={style} {...others} /> : <span style={style} {...others} />;\n}\n","import React from \"react\";\nimport { Button } from \"../libx\";\n\nexport default function Buttons({ isTimerOn, timerCurrentTime, handlers: handle, timerString }) {\n  return (\n    <>\n      {!isTimerOn && timerCurrentTime === 0 && <Button onClick={handle.start} label=\"Start\" />}\n\n      {isTimerOn && timerCurrentTime > 0 && (\n        <Button type=\"Secondary\" onClick={handle.stop} label=\"Stop\" />\n      )}\n\n      {!isTimerOn && timerCurrentTime > 0 && <Button onClick={handle.start} label=\"Start\" />}\n\n      {isTimerOn && <Button data-timerstring={timerString} onClick={handle.lap} label=\"Lap\" />}\n\n      {!isTimerOn && timerCurrentTime > 0 && (\n        <Button type=\"Danger\" onClick={handle.reset} label=\"Reset\" />\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { Text, View } from \"../libx\";\nimport styles from \"./Laps.module.css\";\n\nexport default function Laps(props) {\n  return (\n    <View className={styles.laps}>\n      {props.laps &&\n        props.laps.map((lap, index) => (\n          <Text paragraph selectable={false} className={styles.lapItem} key={lap}>\n            <span>Lap {index}</span>\n            {lap}\n            <span></span>\n          </Text>\n        ))}\n    </View>\n  );\n}\n","import React from \"react\";\nimport { View } from \"../libx\";\nimport styles from \"./AppBar.module.css\";\n\nexport default function AppBar() {\n  return (\n    <View className={styles.AppBar}>\n      <h1 className={styles.Title}>Stopwatch</h1>\n    </View>\n  );\n}\n","import React, { Component } from \"react\";\nimport styles from \"./App.module.css\";\nimport Buttons from \"./components/Buttons\";\nimport Laps from \"./components/Laps\";\nimport AppBar from \"./components/AppBar\";\nimport { Text, View } from \"./libx\";\n\nexport default class App extends Component {\n  state = {\n    isTimerOn: false,\n    timerCurrentTime: 0,\n    timerStart: 0,\n    laps: [],\n  };\n\n  constructor() {\n    super();\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.reset = this.reset.bind(this);\n    this.lap = this.lap.bind(this);\n  }\n\n  start() {\n    this.setState({\n      isTimerOn: true,\n      timerCurrentTime: this.state.timerCurrentTime,\n      timerStart: Date.now() - this.state.timerCurrentTime,\n    });\n\n    this.timer = setInterval(() => {\n      this.setState({\n        timerCurrentTime: Date.now() - this.state.timerStart,\n      });\n    }, 10);\n  }\n\n  stop() {\n    clearInterval(this.timer);\n    this.setState({ isTimerOn: false });\n  }\n\n  reset() {\n    this.setState({\n      timerCurrentTime: 0,\n      timerStart: 0,\n      laps: [],\n    });\n  }\n\n  lap(event) {\n    const newLaps = [...this.state.laps];\n    newLaps.unshift(event.target.dataset.timerstring);\n    this.setState({ laps: newLaps });\n  }\n\n  format(time, mod = 1) {\n    return (\"0\" + (Math.floor(time) % mod)).slice(-2);\n  }\n\n  render() {\n    const { timerCurrentTime } = this.state;\n\n    const nanoSecond = this.format(timerCurrentTime / 10, 100);\n    const second = this.format(timerCurrentTime / 1000, 60);\n    const minute = this.format(timerCurrentTime / 60000, 60);\n    const hour = this.format(timerCurrentTime / 3600000);\n\n    const timerString = `${hour}:${minute}:${second}:${nanoSecond}`;\n    const colorize = timerString === \"00:00:00:00\" && \"#757575\";\n\n    return (\n      <View fullScreen>\n        <AppBar />\n        <View className={styles.TimerContainer}>\n          <Text selectable={true} color={colorize} className={styles.TimerDisplay}>\n            {timerString}\n          </Text>\n        </View>\n\n        {this.state.laps.length !== 0 && <Laps laps={this.state.laps} />}\n\n        <View className={styles.Buttons}>\n          <Buttons\n            isTimerOn={this.state.isTimerOn}\n            timerCurrentTime={timerCurrentTime}\n            timerString={timerString}\n            handlers={{\n              start: this.start,\n              stop: this.stop,\n              reset: this.reset,\n              lap: this.lap,\n            }}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}